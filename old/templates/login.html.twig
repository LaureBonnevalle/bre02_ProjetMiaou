{% extends "layout.html.twig" %}

{% block title %}
Login
{{ parent() }}
{% endblock %}
{% block header%}
        <section id="header">
        
         <img class="avatar" name= "logo" src="assets/img/Miaou/chatFiligranne.png" alt="logo du site : chat tout mignon"></img>
        <h1> Apprendre avec Miaou</h1>
        <div>
        <button class="action-button"><a href="?route=register">Se déconnecter</a></button>
        <button class="action-button"><a href="?route=login">S'inscrire</a></button>
        </div>
        
        </section>
        {% endblock %}
{% block nav %}
{{ parent() }}
{% endblock %}

{% block error %}
{{ parent() }}
{% endblock %} 
    
    {% block content %}
    <main>
    <form action="index.php?route=check-login" method="POST">
        <label  for         = "email">Email :</label>
                        <input  type        = "email"
                                id          = "email"
                                name        = "email"
                                aria-label  = "Email field"
                                value       = "lbonneva@hotmail.com">
                                <div class="error-message" id="error-email"></div>
                                
        <label  for        = "password">Mot de passe :</label>
                        <div class="password-container">
                                <input  type       = "password"
                                        class      = "password"
                                        id         = "password"
                                        name       = "password"
                                        aria-label = "Password field"
                                        value      = "MiaouMiaou1@">
                                <span class="eyes">
                                        <i class="fas fa-eye-slash eyesImag"></i>
                                </span>
                        </div>
                        <div class="error-message" id="error-password"></div>
                                <div class="error-message" id="error-password"></div>
       <input  type    = "text"
                                name    = "csrf_token"
                                id      = "token"
                                value   = "{{ token }}">
                                <div class = "error-message" id = "error-token"></div>

         <input  type    = "submit"
                                name    = "soumettre"
                                value   = "Se connecter">
    </form>
    </main>
    {% endblock %}
   {% block javaform %}
    
   <script>
   export function validateConfirmPassword(password, confirmPassword) {
    return password === confirmPassword;
}

/**
 * Validate a captcha.
 * 
 * @param {string} captcha    - The captcha to validate.
 * @returns {boolean} True if the captcha is valid, false otherwise.
 */
export function validateCaptcha(captcha) {
    const re = /^[a-zA-Z0-9]{5}$/;
    return re.test(captcha);
}

/**
 * Capitalize the first letter of each word in a string.
 * 
 * @param {string} str - The string to capitalize.
 * @returns {string} The capitalized string.
 */
export function capitalize(str) {
    return str.replace(/\b\w/g, char => char.toUpperCase());
}

/**
 * Trim whitespace from both ends of a string.
 * 
 * @param {string} str - The string to trim.
 * @returns {string} The trimmed string.
 */
export function trimString(str) {
    return str.trim();
}

/**
 * Truncate a string to a specific length and add ellipses if needed.
 * 
 * @param {string} str - The string to truncate.
 * @param {number} length - The maximum length of the string.
 * @returns {string} The truncated string.
 */
export function truncateString(str, length) {
    return str.length > length ? str.slice(0, length) + '...' : str;
}

/**
 * Format a date to a specific format (e.g., YYYY-MM-DD).
 * 
 * @param {Date} date - The date to format.
 * @returns {string} The formatted date string.
 */
export function formatDate(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
}

/**
 * Add a specified number of days to a date.
 * 
 * @param {Date} date - The original date.
 * @param {number} days - The number of days to add.
 * @returns {Date} The new date.
 */
export function addDays(date, days) {
    const result = new Date(date);
    result.setDate(result.getDate() + days);
    return result;
}

/**
 * Check if a value is empty (null, undefined, or empty string).
 * 
 * @param {*} value - The value to check.
 * @returns {boolean} True if the value is empty, false otherwise.
 */
export function isEmpty(value) {
    return value == null || value.trim() === '';
}

/**
 * Check if a value is numeric.
 * 
 * @param {*} value - The value to check.
 * @returns {boolean} True if the value is numeric, false otherwise.
 */
export function isNumeric(value) {
    return !isNaN(value) && !isNaN(parseFloat(value));
}

document.addEventListener('DOMContentLoaded', function() {
    const forms = document.querySelectorAll('form');

    forms.forEach(form => {
        form.addEventListener('submit', function(event) {
            // Prevent the form from submitting by default
            event.preventDefault();

            // Reset error messages and styles
            const errorMessages = form.querySelectorAll('.error-message');
            errorMessages.forEach(function(msg) {
                msg.textContent = '';
            });

            let formValid = true;
            
            // Retrieve the new_password value before validation
            const newPasswordValue = form.querySelector("#new_password")?.value || '';

            // Check each field if present
            const fields = [
                { 
                    id              : "firstname", 
                    validate        : validateText, 
                    args            : [2, 60], 
                    errorMessage    : "Le prénom est requis.", 
                    invalidMessage  : "Le prénom doit contenir uniquement des lettres, entre 2 et 60 caractères."
                },
                { 
                    id              : "email", 
                    validate        : validateEmail, 
                    args            : [], 
                    errorMessage    : "L'email est requis.", 
                    invalidMessage  : "L'email n'est pas valide."
                },
                { 
                    id              : "token", 
                    validate        : value => value !== "", 
                    args            : [], 
                    errorMessage    : "Une erreur est survenue lors de l'envoi, actualisez le formulaire et soumettez votre demande une seconde fois !", 
                    invalidMessage  : ""
                },
                { 
                    id              : "password", 
                    validate        : validatePassword, 
                    args            : [], 
                    errorMessage    : "Le mot de passe est requis.", 
                    invalidMessage  : "Le mot de passe doit contenir au moins 8 caractères, dont une majuscule, une minuscule, un chiffre et un caractère spécial."
                },
                { 
                    id              : "old_password", 
                    validate        : validatePassword, 
                    args            : [12], 
                    errorMessage    : "Le mot de passe provisoire est requis.", 
                    invalidMessage  : "Le mot de passe provisoire qui vous a été envoyé doit contenir au moins 12 caractères, une majuscule, une minuscule, un chiffre et un caractère spécial."
                },
                { 
                    id              : "new_password", 
                    validate        : validatePassword, 
                    args            : [], 
                    errorMessage    : "Le mot de passe est requis.", 
                    invalidMessage  : "Votre nouveau mot de passe doit contenir au moins 8 caractères, une majuscule, une minuscule, un chiffre et un caractère spécial."
                },
                { 
                    id              : "confirm_new_password", 
                    validate        : validateConfirmPassword,
                    args            : [newPasswordValue],      // Pass the value of "new_password" as an argument
                    errorMessage    : "Le mot de passe est requis.", 
                    invalidMessage  : "La confirmation de votre nouveau mot de passe doit être identique."
                },
            ];

            fields.forEach(field => {
                const inputElement = form.querySelector(`#${field.id}`);
                const errorElement = form.querySelector(`#error-${field.id}`);

                if (inputElement && errorElement) {
                    const value = inputElement.value.trim();
                    if (value === "") {
                        formValid = false;
                        errorElement.textContent = field.errorMessage;
                    } else if (!field.validate(value, ...field.args)) {
                        formValid = false;
                        errorElement.textContent = field.invalidMessage;
                    }

                    inputElement.addEventListener("input", function() {
                        errorElement.textContent = "";
                        inputElement.classList.remove("error");
                    });
                }
            });

            // If the form is valid, submit it
            if (formValid) {
                form.submit();
            }
        });
    });
});
   </script>
   {% endblock %}